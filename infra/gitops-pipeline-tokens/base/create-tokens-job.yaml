apiVersion: batch/v1
kind: Job
metadata:
  name: create-pipeline-tokens
  namespace: gitops
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  template:
    spec:
      containers:
      - image: registry.redhat.io/openshift-gitops-1/argocd-rhel8:1.7
        command:
          - /bin/bash
          - -c
          - |
            export HOME=/home/argocd

            echo "Getting argocd admin credential..."
            if kubectl get secret $ARGO_INSTANCE_NAME-cluster >/dev/null;
            then
              # Retrieve password
              PASSWORD=$(oc get secret $ARGO_INSTANCE_NAME-cluster -o jsonpath="{.data.admin\.password}" | base64 -d)
            else
              echo "Could not retrieve admin password"
              exit 1
            fi

            IFS=' '
            # Note users here replaced by ArgoCD plugin
            for i in $(seq 1 ${USERS});
                echo "Generating token for user$i"
                account="user${i}-pipeline"
                namespace="user${i}-cicd"
                HAS_SECRET=$(kubectl get secret argocd-env-secret -n $namespace --ignore-not-found)
                if [ -z "$HAS_SECRET" ];
                then
                  echo "No argo-env-secret present in $namespace, creating"
                  echo "Using service ${ARGO_INSTANCE_NAME}-server"
                  argocd login --plaintext --username admin --password ${PASSWORD} "${ARGO_INSTANCE_NAME}-server"
                  echo "Generating token for ${account}"
                  TOKEN=$(argocd account generate-token --account ${account})
                  if [ "$TOKEN" ];
                  then
                    echo "Creating secret argocd-env-secret in namespace ${namespace}"
                    kubectl create secret generic argocd-env-secret --from-literal=ARGOCD_AUTH_TOKEN=${TOKEN} --from-literal=ARGOCD_USERNAME=${account} --from-literal=ARGOCD_SERVER=${ARGO_SERVER_HOST} -n ${namespace}
                  else
                    echo "Token $TOKEN could not be generated, no secret created"
                    exit 1
                  fi
                else
                  echo "The secret argocd-env-secret already exists, skipping"
                fi
            done
        env:
        - name: ARGO_SERVER_HOST
          value: "argocd-server-gitops.${SUB_DOMAIN}"
        - name: ARGO_INSTANCE_NAME
          value: "argocd"
        imagePullPolicy: Always
        name: create-pipeline-tokens
      serviceAccount: create-tokens
      serviceAccountName: create-tokens
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
      terminationGracePeriodSeconds: 30
